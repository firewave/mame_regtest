cmake_minimum_required(VERSION 3.9)
project(mame_regtest)

find_package(Threads REQUIRED)
find_package(LibXml2 REQUIRED)
find_package(ZLIB REQUIRED)

if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    add_compile_options(-Werror -Weverything)
elseif (CMAKE_CXX_COMPILER_ID MATCHES "GNU")
    add_compile_options(-Werror -Wall -Wextra -Wformat=2 -Wshadow -Wcast-qual -Wwrite-strings -Wunreachable-code -Wpedantic -Wundef)
endif()

add_library(common-static STATIC common.c)
if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    target_compile_options(common-static PRIVATE -Wno-sign-conversion -Wno-padded)
endif()
target_include_directories(common-static SYSTEM PRIVATE ${LIBXML2_INCLUDE_DIR})

add_library(config-static STATIC config.c)
if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    target_compile_options(config-static PRIVATE -Wno-padded)
endif()
target_include_directories(config-static SYSTEM PRIVATE ${LIBXML2_INCLUDE_DIR})

add_executable(mame_regtest mame_regtest.c)
target_include_directories(mame_regtest SYSTEM PRIVATE ${LIBXML2_INCLUDE_DIR})
if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    target_compile_options(mame_regtest PRIVATE -Wno-reserved-id-macro -Wno-padded)
elseif (CMAKE_CXX_COMPILER_ID MATCHES "GNU")
    target_compile_options(mame_regtest PRIVATE -Wno-format-truncation)
endif()
target_link_libraries(mame_regtest PRIVATE Threads::Threads common-static config-static ${ZLIB_LIBRARIES} ${LIBXML2_LIBRARIES})

add_executable(create_report create_report.c)
target_include_directories(create_report SYSTEM PRIVATE ${LIBXML2_INCLUDE_DIR})
if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    target_compile_options(create_report PRIVATE -Wno-cast-qual -Wno-disabled-macro-expansion -Wno-double-promotion -Wno-padded)
endif()
target_link_libraries(create_report PRIVATE Threads::Threads common-static config-static ${ZLIB_LIBRARIES} ${LIBXML2_LIBRARIES})

add_executable(create_image_xml create_image_xml.c)
target_include_directories(create_image_xml SYSTEM PRIVATE ${LIBXML2_INCLUDE_DIR})
if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    target_compile_options(create_image_xml PRIVATE -Wno-padded)
endif()
target_link_libraries(create_image_xml PRIVATE Threads::Threads common-static ${ZLIB_LIBRARIES} ${LIBXML2_LIBRARIES})